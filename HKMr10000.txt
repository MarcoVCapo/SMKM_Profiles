Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   305                                           def HKM(D,k,inito):
   306         1            2      2.0      0.0      n=D.shape[0];d=D.shape[1]
   307         1            1      1.0      0.0      STOP=False       
   308       335          357      1.1      0.0      while STOP==False:
   309                                                   ######################################################################
   310                                                   ### Lloyd's algorithm run
   311                                                   ############################# ######################################## 
   312                                                   
   313       334         3644     10.9      0.0          k_means = KMeans(init=inito, n_clusters=k,n_init=1)    
   314       334     27119295  81195.5     52.3          k_means.fit(D);
   315       334          644      1.9      0.0          inito = k_means.cluster_centers_;
   316       334         1940      5.8      0.0          lU=np.zeros(k);lU2=np.zeros(k)
   317     17034       264187     15.5      0.5          for i in range(k):a=len(np.where(k_means.labels_==i)[0]);lU2[i]=a/(a-1.0);lU[i]=a/(a+1.0);
   318                                           
   319                                                   ######################################################################
   320                                                   ### Hartigan's heuristic
   321                                                   ######################################################################
   322                                           
   323       334     14863529  44501.6     28.7          Ds=cdist(D, inito, 'sqeuclidean') 
   324       334       216197    647.3      0.4          Ds2= np.multiply(Ds,lU)           
   325   3340334      3840119      1.1      7.4          for i in range(n):Ds2[i][k_means.labels_[i]]=float('nan');        
   326   3340334      4769420      1.4      9.2          Ds3=np.array([lU2[k_means.labels_[i]]*Ds[i][k_means.labels_[i]] for i in range(n)])        
   327       334       427293   1279.3      0.8          phi=Ds3-np.nanmin(Ds2,axis=1)
   328                                                   
   329       334       229547    687.3      0.4          if max(phi)>=0:
   330       333         5530     16.6      0.0              t=np.argmax(phi)
   331       333          791      2.4      0.0              jk=k_means.labels_[t]
   332       333        14361     43.1      0.0              j=np.nanargmin(Ds2[t])
   333       333          858      2.6      0.0              k_means.labels_[t]=j
   334       333        29264     87.9      0.1              inito[j]=np.mean(D[np.where(k_means.labels_==j)[0]],axis=0)
   335       333        21480     64.5      0.0              inito[jk]=np.mean(D[np.where(k_means.labels_==jk)[0]],axis=0) 
   336                                                   else:
   337         1            1      1.0      0.0              STOP=True  
   338         1            1      1.0      0.0      return 
