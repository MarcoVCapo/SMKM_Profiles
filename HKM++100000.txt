Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   305                                           def HKM(D,k,inito):
   306         1            2      2.0      0.0      n=D.shape[0];d=D.shape[1]
   307         1            1      1.0      0.0      STOP=False       
   308         2            3      1.5      0.0      while STOP==False:
   309                                                   ######################################################################
   310                                                   ### Lloyd's algorithm run
   311                                                   ############################# ######################################## 
   312                                                   
   313         1            9      9.0      0.0          k_means = KMeans(init=inito, n_clusters=k,n_init=1)    
   314         1      1261852 1261852.0     65.1          k_means.fit(D);
   315         1            2      2.0      0.0          inito = k_means.cluster_centers_;
   316         1            9      9.0      0.0          lU=np.zeros(k);lU2=np.zeros(k)
   317        51         5274    103.4      0.3          for i in range(k):a=len(np.where(k_means.labels_==i)[0]);lU2[i]=a/(a-1.0);lU[i]=a/(a+1.0);
   318                                           
   319                                                   ######################################################################
   320                                                   ### Hartigan's heuristic
   321                                                   ######################################################################
   322                                           
   323         1       423520 423520.0     21.9          Ds=cdist(D, inito, 'sqeuclidean') 
   324         1        15692  15692.0      0.8          Ds2= np.multiply(Ds,lU)           
   325    100001        92926      0.9      4.8          for i in range(n):Ds2[i][k_means.labels_[i]]=float('nan');        
   326    100001       122610      1.2      6.3          Ds3=np.array([lU2[k_means.labels_[i]]*Ds[i][k_means.labels_[i]] for i in range(n)])        
   327         1        10598  10598.0      0.5          phi=Ds3-np.nanmin(Ds2,axis=1)
   328                                                   
   329         1         5677   5677.0      0.3          if max(phi)>=0:
   330                                                       t=np.argmax(phi)
   331                                                       jk=k_means.labels_[t]
   332                                                       j=np.nanargmin(Ds2[t])
   333                                                       k_means.labels_[t]=j
   334                                                       inito[j]=np.mean(D[np.where(k_means.labels_==j)[0]],axis=0)
   335                                                       inito[jk]=np.mean(D[np.where(k_means.labels_==jk)[0]],axis=0) 
   336                                                   else:
   337         1            0      0.0      0.0              STOP=True  
   338         1            0      0.0      0.0      return 
