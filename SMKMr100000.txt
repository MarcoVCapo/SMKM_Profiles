Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   242                                           def SMKM(D,k,inito,maxiter=10):   
   243         1            2      2.0      0.0      n=D.shape[0];d=D.shape[1]
   244         1            1      1.0      0.0      i=0;STOP=False;
   245        12           10      0.8      0.0      while i<=maxiter:
   246                                                   ######################################################################
   247                                                   ### Lloyd's algorithm run
   248                                                   ############################# ######################################## 
   249                                                         
   250        11          119     10.8      0.0          k_means = KMeans(init=inito, n_clusters=k,n_init=1)        
   251        11     11770152 1070013.8     48.3          k_means.fit(D);     
   252        11           32      2.9      0.0          inito = k_means.cluster_centers_;
   253                                                   
   254                                                   ######################################################################
   255                                                   ### Re-initialization step
   256                                                   ######################################################################
   257                                                   
   258                                                   # *********** SplitStep *************
   259                                                    
   260        11          105      9.5      0.0          Desc=np.zeros(k);
   261       561        59942    106.8      0.2          U=np.array([np.where(k_means.labels_==j) for j in range(k)])
   262       561       795950   1418.8      3.3          f=np.array([sum(cdist(D[U[j][0]],inito[j].reshape(1,-1),'sqeuclidean')) for j in range(k)])             
   263       561        58932    105.0      0.2          lU=np.array([len(np.where(k_means.labels_==j)[0]) for j in range(k)])
   264       561         1439      2.6      0.0          CC=np.array([np.array([inito[0],inito[0]]) for iI in range(k)])
   265        11           47      4.3      0.0          l0C=np.zeros(k);l1C=np.zeros(k)
   266                                                   
   267       561          547      1.0      0.0          for j in range(k):
   268       550       182328    331.5      0.7              X=D[U[j][0]];
   269                                                       
   270       550          853      1.6      0.0              if len(X)>1:
   271                                           
   272       544         5643     10.4      0.0                  k_meansINT = KMeans(init='k-means++', n_clusters=2, n_init=1)
   273       544     11413237  20980.2     46.8                  k_meansINT.fit(X);
   274                                                           
   275       544         5066      9.3      0.0                  CC[j]=np.array([k_meansINT.cluster_centers_[0],k_meansINT.cluster_centers_[1]])
   276       544        10074     18.5      0.0                  l0C[j]=len(np.where(k_meansINT.labels_==0)[0])
   277       544         7436     13.7      0.0                  l1C[j]=len(np.where(k_meansINT.labels_==1)[0])
   278       544         3340      6.1      0.0                  Desc[j]=k_meansINT.inertia_-f[j]
   279                                                       
   280                                                       else:
   281         6            4      0.7      0.0                  Desc[j]=0   
   282                                                                        
   283        11           73      6.6      0.0          kk=np.argmin(Desc)
   284        11          442     40.2      0.0          inito=np.delete(inito,kk,0)
   285        11          247     22.5      0.0          lU=np.delete(lU,kk,0)            
   286        11          324     29.5      0.0          inito=np.vstack((inito,CC[kk][0]));inito=np.vstack((inito,CC[kk][1]))
   287        11          274     24.9      0.0          lU=np.hstack((lU,l0C[kk]));lU=np.hstack((lU,l1C[kk]))
   288                                                   
   289                                                   # *********** MergeStep *************       
   290                                                   
   291        11         3008    273.5      0.0          Z = cdist(inito,inito,'sqeuclidean');
   292        11          236     21.5      0.0          Z0=copy.deepcopy(Z)            
   293       561          362      0.6      0.0          for j in range(k):
   294     15125        10005      0.7      0.0              for m in range(j,k+1):
   295     14575        16638      1.1      0.1                  t=(lU[j]*lU[m])/(lU[j]+lU[m])
   296     14575        20126      1.4      0.1                  Z0[j][m]=Z[j][m]*t;Z0[m][j]=0;  
   297        11           11      1.0      0.0          Z0[k-1][k]=0          
   298        11          786     71.5      0.0          ind=np.where(Z0==np.min(Z0[np.nonzero(Z0)]));
   299        11           14      1.3      0.0          j=ind[0][0];m=ind[1][0]
   300        11          144     13.1      0.0          inito[j]=(lU[j]*inito[j]+lU[m]*inito[m])/(lU[j]+lU[m]) 
   301        11          390     35.5      0.0          inito=np.delete(inito,m,0)
   302        11            8      0.7      0.0          i+=1
   303         1            1      1.0      0.0      return 
