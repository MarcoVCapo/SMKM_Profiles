Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   242                                           def SMKM(D,k,inito,maxiter=10):   
   243         1            3      3.0      0.0      n=D.shape[0];d=D.shape[1]
   244         1            2      2.0      0.0      i=0;STOP=False;
   245        12           11      0.9      0.0      while i<=maxiter:
   246                                                   ######################################################################
   247                                                   ### Lloyd's algorithm run
   248                                                   ############################# ######################################## 
   249                                                         
   250        11          112     10.2      0.0          k_means = KMeans(init=inito, n_clusters=k,n_init=1)        
   251        11        85822   7802.0     10.3          k_means.fit(D);     
   252        11           17      1.5      0.0          inito = k_means.cluster_centers_;
   253                                                   
   254                                                   ######################################################################
   255                                                   ### Re-initialization step
   256                                                   ######################################################################
   257                                                   
   258                                                   # *********** SplitStep *************
   259                                                    
   260        11           41      3.7      0.0          Desc=np.zeros(k);
   261       561         2536      4.5      0.3          U=np.array([np.where(k_means.labels_==j) for j in range(k)])
   262       561        33739     60.1      4.1          f=np.array([sum(cdist(D[U[j][0]],inito[j].reshape(1,-1),'sqeuclidean')) for j in range(k)])             
   263       561         2321      4.1      0.3          lU=np.array([len(np.where(k_means.labels_==j)[0]) for j in range(k)])
   264       561         1516      2.7      0.2          CC=np.array([np.array([inito[0],inito[0]]) for iI in range(k)])
   265        11           43      3.9      0.0          l0C=np.zeros(k);l1C=np.zeros(k)
   266                                                   
   267       561          517      0.9      0.1          for j in range(k):
   268       550         4524      8.2      0.5              X=D[U[j][0]];
   269                                                       
   270       550          629      1.1      0.1              if len(X)>1:
   271                                           
   272       550         3852      7.0      0.5                  k_meansINT = KMeans(init='k-means++', n_clusters=2, n_init=1)
   273       550       633250   1151.4     76.1                  k_meansINT.fit(X);
   274                                                           
   275       550         3855      7.0      0.5                  CC[j]=np.array([k_meansINT.cluster_centers_[0],k_meansINT.cluster_centers_[1]])
   276       550         3448      6.3      0.4                  l0C[j]=len(np.where(k_meansINT.labels_==0)[0])
   277       550         1773      3.2      0.2                  l1C[j]=len(np.where(k_meansINT.labels_==1)[0])
   278       550         2448      4.5      0.3                  Desc[j]=k_meansINT.inertia_-f[j]
   279                                                       
   280                                                       else:
   281                                                           Desc[j]=0   
   282                                                                        
   283        11           63      5.7      0.0          kk=np.argmin(Desc)
   284        11          406     36.9      0.0          inito=np.delete(inito,kk,0)
   285        11          231     21.0      0.0          lU=np.delete(lU,kk,0)            
   286        11          299     27.2      0.0          inito=np.vstack((inito,CC[kk][0]));inito=np.vstack((inito,CC[kk][1]))
   287        11          243     22.1      0.0          lU=np.hstack((lU,l0C[kk]));lU=np.hstack((lU,l1C[kk]))
   288                                                   
   289                                                   # *********** MergeStep *************       
   290                                                   
   291        11         2889    262.6      0.3          Z = cdist(inito,inito,'sqeuclidean');
   292        11          237     21.5      0.0          Z0=copy.deepcopy(Z)            
   293       561          476      0.8      0.1          for j in range(k):
   294     15125         9869      0.7      1.2              for m in range(j,k+1):
   295     14575        16193      1.1      1.9                  t=(lU[j]*lU[m])/(lU[j]+lU[m])
   296     14575        19807      1.4      2.4                  Z0[j][m]=Z[j][m]*t;Z0[m][j]=0;  
   297        11           12      1.1      0.0          Z0[k-1][k]=0          
   298        11          836     76.0      0.1          ind=np.where(Z0==np.min(Z0[np.nonzero(Z0)]));
   299        11           20      1.8      0.0          j=ind[0][0];m=ind[1][0]
   300        11          135     12.3      0.0          inito[j]=(lU[j]*inito[j]+lU[m]*inito[m])/(lU[j]+lU[m]) 
   301        11          423     38.5      0.1          inito=np.delete(inito,m,0)
   302        11           10      0.9      0.0          i+=1
   303         1            1      1.0      0.0      return 
