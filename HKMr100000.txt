Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   305                                           def HKM(D,k,inito):
   306         1            2      2.0      0.0      n=D.shape[0];d=D.shape[1]
   307         1            1      1.0      0.0      STOP=False       
   308      2195         2384      1.1      0.0      while STOP==False:
   309                                                   ######################################################################
   310                                                   ### Lloyd's algorithm run
   311                                                   ############################# ######################################## 
   312                                                   
   313      2194        25556     11.6      0.0          k_means = KMeans(init=inito, n_clusters=k,n_init=1)    
   314      2194   2008483707 915443.8     56.7          k_means.fit(D);
   315      2194         6107      2.8      0.0          inito = k_means.cluster_centers_;
   316      2194        22461     10.2      0.0          lU=np.zeros(k);lU2=np.zeros(k)
   317    111894     12156899    108.6      0.3          for i in range(k):a=len(np.where(k_means.labels_==i)[0]);lU2[i]=a/(a-1.0);lU[i]=a/(a+1.0);
   318                                           
   319                                                   ######################################################################
   320                                                   ### Hartigan's heuristic
   321                                                   ######################################################################
   322                                           
   323      2194    931246340 424451.4     26.3          Ds=cdist(D, inito, 'sqeuclidean') 
   324      2194     40355009  18393.3      1.1          Ds2= np.multiply(Ds,lU)           
   325 219402194    219707053      1.0      6.2          for i in range(n):Ds2[i][k_means.labels_[i]]=float('nan');        
   326 219402194    291660178      1.3      8.2          Ds3=np.array([lU2[k_means.labels_[i]]*Ds[i][k_means.labels_[i]] for i in range(n)])        
   327      2194     23217234  10582.1      0.7          phi=Ds3-np.nanmin(Ds2,axis=1)
   328                                                   
   329      2194     13009298   5929.5      0.4          if max(phi)>=0:
   330      2193       179495     81.8      0.0              t=np.argmax(phi)
   331      2193         7382      3.4      0.0              jk=k_means.labels_[t]
   332      2193       104065     47.5      0.0              j=np.nanargmin(Ds2[t])
   333      2193         6057      2.8      0.0              k_means.labels_[t]=j
   334      2193       833364    380.0      0.0              inito[j]=np.mean(D[np.where(k_means.labels_==j)[0]],axis=0)
   335      2193       753906    343.8      0.0              inito[jk]=np.mean(D[np.where(k_means.labels_==jk)[0]],axis=0) 
   336                                                   else:
   337         1            1      1.0      0.0              STOP=True  
   338         1            0      0.0      0.0      return 
